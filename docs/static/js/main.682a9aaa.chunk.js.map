{"version":3,"sources":["components/AddCategory.js","utils/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"sLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OAEI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,QAOhD,SACI,uBACIC,KAAK,OACLC,MAAOT,EACPU,SAhBc,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,+BCN/CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDf2BK,CAAa1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAGtB,OACI,qCAEI,oBAAIJ,UAAU,sCAAd,SAAqDhB,IAEpDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEStBgB,EAzBa,WAGxB,MAAoCzC,mBAAS,CAAC,eAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAGA,OACI,gCACI,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CACIA,SAAUA,GACLA,YCdjC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.682a9aaa.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setinputValue] = useState(\"\");\n\n    const handleInputChange = (e) => setinputValue(e.target.value);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [inputValue, ...categories]);\n        }\n\n    }\n\n    return (\n\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            ></input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ij2ktZ3MfAY1ZLX48HGgZaUcd7SAQLfD`\n    const response = await fetch(url);\n    const { data } = await response.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\nimport '../index.css'\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn \">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n\n    return (\n        <>\n\n            <h3 className=\" animate__animated animate__fadeIn \">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className='card-grid'>\n\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img} >\n                        </GifGridItem>\n                    ))\n                }\n\n            </div >\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../utils/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n    }, [category])\n\n    return state;\n}","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n\n    // const categorias = [\"Primer\", \"Segundo\", \"Tercer\"]\n    const [categories, setCategories] = useState([\"Charmander\"])\n\n\n    return (\n        <div>\n            <h2> GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} ></AddCategory>\n            <hr></hr>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid\n                            category={category}\n                            key={category}>\n                        </GifGrid>\n                    ))\n                }\n            </ol>\n        </div>\n    );\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}